dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4,6)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=1.2,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4,6)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=1.5,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4,6)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=2,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4,6)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=3,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=3,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=2,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=1,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=2,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(0.5,1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=2,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(0.5,1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=1,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
SIR.vector.field <- function(t, vars=c(S,I,R), parms=c(R_0,1/gamma,delta,mu,sigma)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S+sigma*(S+R) # dS/dt
dI <- gamma*R_0*S*I - gamma*I+delta*S-mu*I # dI/dt
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(0.5,1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=0.5,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
library(deSolve)
## Vector Field for SIR model
<<<<<<< HEAD
=======
SIR.vector.field <- function(t, vars=c(S,I,R,Q), parms=c(R_0,1/gamma,delta)) {
with(as.list(c(parms, vars)), {
dS <- -gamma*R_0*S*I-delta*S # dS/dt
dQ <- gamma*R_0*S*I + delta*S # cumulative cases
dI <- dQ - gamma*I # dI/dt
>>>>>>> 3a392cfd724b446fd2b2231282bb35631105eb3b
dR <- gamma*I #dR/dt
vec.fld <- c(dS=dS, dI=dI, dR=dR, dQ=dQ)
return(list(vec.fld)) # ode() requires a list
})
}
draw.soln <- function(ic=c(S=1,I=0), tmax=1,
times=seq(0,tmax,by=tmax/500),
func, parms, ... ) {
soln <- ode(ic, times, func, parms)
lines(times, soln[,"I"], col=Rep_nums[i], lwd=3,... )
}
## Plot solutions of the SIR model
tmax <- 100 # end time for numerical integration of the ODE
## draw box for plot:
plot(0,0,xlim=c(0,tmax),ylim=c(0,1),
type="n",xlab="Time (t)",ylab="Prevalence (I)",las=1)
## initial conditions:
I0 <- 0.001
S0 <- 1 - I0
R0 <- 1 - I0 - S0
## draw solutions for several values of parameter R_0:
vary_delta <- c(0.5,1,1.5,2,3,4)
for (i in 1:length(vary_delta)) {
draw.soln(ic=c(S=S0,I=I0,R=R0), tmax=tmax,
func=SIR.vector.field,
parms=c(R_0=0.5,gamma=1/4,delta=vary_delta[i],mu=0.3,sigma=0.03),
lty=i # use a different line style for each solution
)
}
legend("topright",legend=vary_delta,col=vary_delta,lty=1:6)
